// client/src/components/GenerationStatusModal.js
import React, { useState, useEffect } from 'react';
import { FiDownload, FiX, FiLoader, FiCheckCircle, FiAlertTriangle, FiChevronLeft, FiChevronRight } from 'react-icons/fi';
import './GenerationStatusModal.css';

const GenerationStatusModal = ({ isOpen, onClose, status, downloadUrl, errorMessage, previewContent }) => {
    // State to track the currently viewed slide index
    const [currentSlideIndex, setCurrentSlideIndex] = useState(0);

    // Effect to reset the slide index whenever the modal is opened
    useEffect(() => {
        if (isOpen) {
            setCurrentSlideIndex(0);
        }
    }, [isOpen]);

    if (!isOpen) return null;

    // Create a complete list of slides, including a generated title slide
    const allSlides = previewContent ? [
        { isTitleSlide: true, title: previewContent.title },
        ...previewContent.slides
    ] : [];

    const handleNextSlide = () => {
        if (currentSlideIndex < allSlides.length - 1) {
            setCurrentSlideIndex(currentSlideIndex + 1);
        }
    };

    const handlePrevSlide = () => {
        if (currentSlideIndex > 0) {
            setCurrentSlideIndex(currentSlideIndex - 1);
        }
    };

    const renderContent = () => {
        switch (status) {
            case 'generating':
                return (
                    <>
                        <FiLoader className="status-icon generating" size={48} />
                        <h3 className="modal-title">Generating Presentation...</h3>
                        <p className="modal-subtitle">This may take a moment. Please don't close this window.</p>
                    </>
                );
            case 'success':
                const currentSlide = allSlides[currentSlideIndex];
                return (
                    <>
                        <FiCheckCircle className="status-icon success" size={48} />
                        <h3 className="modal-title">Presentation Ready!</h3>
                        
                        {/* --- NEW INTERACTIVE SLIDE VIEWER --- */}
                        <div className="ppt-preview-viewer">
                            {currentSlide.isTitleSlide ? (
                                <div className="preview-slide preview-title-slide">
                                    <h4>{currentSlide.title}</h4>
                                    <p>Generated by AI Student Chatbot</p>
                                </div>
                            ) : (
                                <div className="preview-slide">
                                    <strong>{currentSlide.title}</strong>
                                    <ul>
                                        {currentSlide.bullets.map((bullet, i) => (
                                            <li key={i}>{bullet}</li>
                                        ))}
                                    </ul>
                                </div>
                            )}
                        </div>

                        {/* --- NEW NAVIGATION CONTROLS --- */}
                        <div className="preview-navigation">
                            <button onClick={handlePrevSlide} disabled={currentSlideIndex === 0} className="nav-button">
                                <FiChevronLeft size={24} />
                            </button>
                            <span className="slide-counter">
                                Slide {currentSlideIndex + 1} of {allSlides.length}
                            </span>
                            <button onClick={handleNextSlide} disabled={currentSlideIndex === allSlides.length - 1} className="nav-button">
                                <FiChevronRight size={24} />
                            </button>
                        </div>

                        <a href={downloadUrl} className="download-button" download>
                            <FiDownload />
                            Download .pptx
                        </a>
                    </>
                );
            case 'error':
                 return (
                    <>
                        <FiAlertTriangle className="status-icon error" size={48} />
                        <h3 className="modal-title">Generation Failed</h3>
                        <p className="modal-subtitle error-message">{errorMessage || 'An unknown error occurred.'}</p>
                        <button onClick={onClose} className="close-action-button">Close</button>
                    </>
                );
            default:
                return null;
        }
    };

    return (
        <div className="modal-overlay-dark">
            <div className="generation-status-modal large"> {/* Added 'large' class */}
                <button onClick={onClose} className="modal-close-button" title="Close"><FiX /></button>
                <div className="modal-content-body">
                    {renderContent()}
                </div>
            </div>
        </div>
    );
};

export default GenerationStatusModal;